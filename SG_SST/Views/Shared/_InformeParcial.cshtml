@model List<SG_SST.Models.Planificacion.CicloModel>
@{ var idGrafica = "graficaActual"; }
<style>
    #chart-radar1 {
        margin-bottom: 60px;
    }
</style>
<script src="~/Scripts/EvaluacionEstandarMinimo/reportes-estandar-minimos.js"></script>
<div class="panel-heading" style="color:black">
    Gráfica del Porcentaje de Avance en respuestas dadas sobre el total de Preguntas de los EM-SGSST
</div>
<div class="container-graficas">
    <div class="inner-graficas">
        <div class="form-group row">
            <div class="col-xs-4">
                <h4>Informes parciales:</h4>
            </div>
            <div class="col-xs-4">
                @Html.DropDownList(idGrafica, new List<SelectListItem>() { new SelectListItem() { Value = "1", Text = "Porcentaje avance en Respuestas dadas" }, new SelectListItem() { Value = "2", Text = "Puntaje avance en Respuestas dadas" }}, "Seleccione una gráfica...", new { @class = "form-control" })
            </div>
            <button id="volver_calf_est" type="button" class="boton botonactive">
                Volver a calificación
            </button>
        </div>
        <div class="row">
            <h3 id="tit_grafica"></h3>
        </div>
        <div class="big radarChart" id="chart-radar" />
        <div class="form-group row">
            <button id="descargarExcelParcial" style="margin-top: 10px" type="button" class="agr_aspec boton botoninfo">
                Descargar Excel
            </button>
            <button id="descargarEstandaresMinimosParcial" style="margin-top: 10px" type="button" class="agr_aspec boton botoninfo">
                Descargar Estandares Minimos
            </button>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        var rangoColores = ["#A9CCE3", "#D4AC0D", "#58D68D", "#F1948A", "#73C6B6", "#B03A2E", "#A569BD", "#138D75", "#D4AC0D", "#85C1E9", "#A93226", "#616A6B", "#34495E", "#2874A6"];
        var urlBase = utils.getBaseUrl();
        var urlReportes = urlBase + '/EvaluacionEstandarMinimo';
        var anchoSVG = 960;
        var altoSVG = 500;
        $('#volver_calf_est').on('click', function () {
            window.location.href = urlReportes + '/Index';
        });
        $('#graficaActual').on('change', function () {
            var urlAccion = '';
            var graficaSelect = $(this).val();
            if (graficaSelect == '') {
                swal('Atención', 'Seleccione el ciclo que desea para generar la gráfica.');
                return false;
            }
            switch (graficaSelect) {
                case '1':
                    $('#tit_grafica').text('TOTAL');
                    urlAccion = '/ObtenerPorcentajeRespuestasDeTotalPreguntas';
                    break;
                case '2':
                    $('#tit_grafica').text('TOTAL');
                    urlAccion = '/ObtenerPorcentajePuntajeDePuntajeTotal';
                    break;
            }
            if ($('svg').length > 0)
                $('svg').remove();
            PopupPosition();
            $.ajax({
                url: urlReportes + urlAccion,
                type: 'post'
            }).done(function (response) {
                if (response != null && response != undefined && response != '' && response.Mensaje == 'OK') {
                    var data = response.Datos;
                    var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                        width = 500 - margin.left - margin.right,
                        height = 300 - margin.top - margin.bottom, padding = 100;

                    var wMaior = 400;
                    var wMenor = 200;

                    var colorscale = d3.scaleOrdinal(d3.schemeCategory10);
                    var legendOptions = ['Calificación'];
                    var size = data.length;
                    var json = [
                        [
                            { "axis": "I. PLANEAR", "value": 0 },
                            { "axis": "IV. ACTUAR", "value": 0 },
                            { "axis": "III. VERIFICAR", "value": 0 },
                            { "axis": "II. HACER", "value": 0 }
                        ]
                    ];
                    if (size > 0) {
                        var json = null;
                        var opcionGrafica = parseInt(graficaSelect);
                        if (opcionGrafica == 1) {
                            json = [
                                [
                                    { "axis": "I. PLANEAR", "value": data[0].PorcenRespondido },
                                    { "axis": "IV. ACTUAR", "value": data[3].PorcenRespondido },
                                    { "axis": "III. VERIFICAR", "value": data[2].PorcenRespondido },
                                    { "axis": "II. HACER", "value": data[1].PorcenRespondido }
                                ]
                            ];
                        } else if (opcionGrafica == 2) {
                            json = [
                                [
                                    { "axis": "I. PLANEAR", "value": data[0].PorcenObtenido },
                                    { "axis": "IV. ACTUAR", "value": data[3].PorcenObtenido },
                                    { "axis": "III. VERIFICAR", "value": data[2].PorcenObtenido },
                                    { "axis": "II. HACER", "value": data[1].PorcenObtenido }
                                ]
                            ];
                        }
                    }

                    function drawRadarCharts() {
                        drawRadarChart('#chart-radar', wMaior, wMaior);
                    };

                    function drawRadarChart(divId, w, h) {
                        var textSizeLevels = "10px !important";
                        var textSizeTooltip = "13px !important";
                        var textSizeLegend = "11px !important";
                        var circleSize = 5;
                        var strokeWidthPolygon = "2px";

                        var RadarChart = {
                            draw: function (id, data, options) {
                                var cfg = {
                                    radius: circleSize,
                                    w: w,
                                    h: h,
                                    factor: 1,
                                    factorLegend: .85,
                                    levels: 5,
                                    maxValue: 0,
                                    radians: 2 * Math.PI,
                                    opacityArea: 0.001,
                                    ToRight: 5,
                                    TranslateX: 80,
                                    TranslateY: 30,
                                    ExtraWidthX: 10,
                                    ExtraWidthY: 100,
                                    color: d3.scaleOrdinal(d3.schemeCategory10)
                                };

                                if ('undefined' !== typeof options) {
                                    for (var i in options) {
                                        if ('undefined' !== typeof options[i]) {
                                            cfg[i] = options[i];
                                        }
                                    }
                                }
                                //cfg.maxValue = Math.max(cfg.maxValue, d3.max(data, function (i) { return d3.max(i.map(function (o) { return o.value; })); }));
                                cfg.maxValue = 100;
                                var allAxis = (data[0].map(function (i, j) { return i.axis; }));
                                var total = allAxis.length;
                                var radius = cfg.factor * Math.min(cfg.w / 2, cfg.h / 2);
                                d3.select(id)
                                    .select("svg").remove();

                                var g = d3.select(id)
                                    .append("svg")
                                    .attr("width", cfg.w + cfg.ExtraWidthX)
                                    .attr("height", cfg.h + cfg.ExtraWidthY)
                                    .attr("class", "graph-svg-component")
                                    .append("g")
                                    .attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");

                                var tooltip;

                                //Segmentos circulares por nivel (6 niveles)
                                for (var j = 0; j < cfg.levels; j++) {
                                    var levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
                                    g.selectAll(".levels")
                                    .data(allAxis)
                                    .enter()
                                    .append("svg:line")
                                    .attr("x1", function (d, i) { return levelFactor * (1 - cfg.factor * Math.sin(i * cfg.radians / total)); })
                                    .attr("y1", function (d, i) { return levelFactor * (1 - cfg.factor * Math.cos(i * cfg.radians / total)); })
                                    .attr("x2", function (d, i) { return levelFactor * (1 - cfg.factor * Math.sin((i + 1) * cfg.radians / total)); })
                                    .attr("y2", function (d, i) { return levelFactor * (1 - cfg.factor * Math.cos((i + 1) * cfg.radians / total)); })
                                    .attr("class", "line")
                                    .style("stroke", "grey")
                                    .style("stroke-opacity", "0.75")
                                    //.style("stroke-width", "0.3px")
                                    .attr("transform", "translate(" + (cfg.w / 2 - levelFactor) + ", " + (cfg.h / 2 - levelFactor) + ")");
                                }

                                //Texto indicando el porcentaje (%) de cada nivel
                                for (var j = 0; j < cfg.levels; j++) {
                                    var levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
                                    g.selectAll(".levels")
                                    .data([1]) //dummy data
                                    .enter()
                                    .append("svg:text")
                                    .attr("x", function (d) { return levelFactor * (1 - cfg.factor * Math.sin(0)); })
                                    .attr("y", function (d) { return levelFactor * (1 - cfg.factor * Math.cos(0)); })
                                    .attr("class", "legend")
                                    .style("font-family", "sans-serif")
                                    .style("font-size", textSizeLevels)
                                    .attr("transform", "translate(" + (cfg.w / 2 - levelFactor + cfg.ToRight) + ", " + (cfg.h / 2 - levelFactor) + ")")
                                    .attr("fill", "#737373")
                                    .text(((j + 1) * cfg.maxValue / cfg.levels) + ' %');
                                    //.text(parseFloat((j + 1) * cfg.maxValue / cfg.levels).toFixed(2));
                                }

                                series = 0;
                                var axis = g.selectAll(".axis")
                                .data(allAxis)
                                .enter()
                                .append("g")
                                .attr("class", axis);

                                axis.append("line")
                                .attr("x1", cfg.w / 2)
                                .attr("y1", cfg.h / 2)
                                .attr("x2", function (d, i) { return cfg.w / 2 * (1 - cfg.factor * Math.sin(i * cfg.radians / total)); })
                                .attr("y2", function (d, i) { return cfg.h / 2 * (1 - cfg.factor * Math.cos(i * cfg.radians / total)); })
                                .attr("class", "line")
                                .style("stroke", "grey")
                                .style("stroke-width", "1px");

                                //Texto en cada vertice (ciclos)
                                axis.append("text")
                                .attr("class", "legend")
                                .text(function (d) { return d; })
                                .style("font-family", "sans-serif")
                                .style("font-size", textSizeLegend)
                                .attr("text-anchor", "middle")
                                .attr("dy", "1.5em")
                                .attr("transform", function (d, i) { return "translate(0, -20)"; })
                                .attr("x", function (d, i) { return cfg.w / 2 * (1 - cfg.factorLegend * Math.sin(i * cfg.radians / total)) - 60 * Math.sin(i * cfg.radians / total); })
                                .attr("y", function (d, i) { return cfg.h / 2 * (1 - Math.cos(i * cfg.radians / total)) - 20 * Math.cos(i * cfg.radians / total); });

                                data.forEach(function (y, x) {
                                    dataValues = [];
                                    g.selectAll(".nodes")
                                    .data(y, function (j, i) {
                                        dataValues.push([
                                            cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                                            cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
                                        ]);
                                    });
                                    dataValues.push(dataValues[0]);
                                    g.selectAll(".area")
                                    .data([dataValues])
                                    .enter()
                                    .append("polygon")
                                    .attr("class", "radar-chart-series_" + series)
                                    .style("stroke-width", strokeWidthPolygon)
                                    .style("stroke", cfg.color(series))
                                    .attr("points", function (d) {
                                        var str = "";
                                        for (var pti = 0; pti < d.length; pti++) {
                                            str = str + d[pti][0] + "," + d[pti][1] + " ";
                                        }
                                        return str;
                                    })
                                    .style("fill", function (j, i) {
                                        return cfg.color(series);
                                    })
                                    .style("fill-opacity", cfg.opacityArea)
                                    .on('mouseover', function (d) {
                                        z = "polygon." + d3.select(this).attr("class");
                                        g.selectAll("polygon")
                                        .transition(200)
                                        .style("fill-opacity", 0.1);
                                        g.selectAll(z)
                                        .transition(200)
                                        .style("fill-opacity", 0.7);
                                    })
                                    .on('mouseout', function () {
                                        g.selectAll("polygon")
                                        .transition(200)
                                        .style("fill-opacity", cfg.opacityArea);
                                    });

                                    series++;
                                });

                                series = 0;

                                data.forEach(function (y, x) {
                                    g.selectAll(".nodes")
                                    .data(y).enter()
                                    .append("svg:circle")
                                    .attr("class", "radar-chart-series_" + series)
                                    .attr('r', cfg.radius)
                                    .attr("alt", function (j) { return Math.max(j.value, 0); })
                                    .attr("cx", function (j, i) {
                                        dataValues.push([
                                            cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                                            cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
                                        ]);
                                        return cfg.w / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total));
                                    })
                                    .attr("cy", function (j, i) {
                                        return cfg.h / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total));
                                    })
                                    .attr("data-id", function (j) {
                                        return j.axis;
                                    })
                                    .style("fill", cfg.color(series)).style("fill-opacity", .9)
                                    .on('mouseover', function (d) {
                                        newX = parseFloat(d3.select(this).attr('cx')) - 10;
                                        newY = parseFloat(d3.select(this).attr('cy')) - 5;

                                        tooltip.attr('x', newX)
                                        .attr('y', newY)
                                        .text(d.value)
                                        .transition(200)
                                        .style('opacity', 1);

                                        z = "polygon." + d3.select(this).attr("class");
                                        g.selectAll("polygon")
                                        .transition(200)
                                        .style("fill-opacity", 0.1);
                                        g.selectAll(z)
                                        .transition(200)
                                        .style("fill-opacity", 0.7);
                                    })
                                    .on('mouseout', function () {
                                        tooltip.transition(200)
                                        .style('opacity', 0);
                                        g.selectAll("polygon")
                                        .transition(200)
                                        .style("fill-opacity", cfg.opacityArea);
                                    })
                                    .append("svg:title")
                                    .text(function (j) {
                                        return Math.max(j.value, 0);
                                    });

                                    series++;
                                });

                                //Tooltip
                                tooltip = g.append('text')
                                .style('opacity', 0)
                                .style('font-family', 'sans-serif')
                                .style('font-size', textSizeTooltip);
                            }
                        };

                        // Options for the Radar chart, other than default
                        var myOptions = {
                            w: w
                            , h: h
                            , ExtraWidthX: 180
                            , labelScale: 0.7
                            , levels: 5
                            , levelScale: 0.85
                            , facetPaddingScale: 1.9
                            , maxValue: 0.6
                            , showAxes: true
                            , showAxesLabels: true
                            , showLegend: true
                            , showLevels: true
                            , showLevelsLabels: false
                            , showPolygons: true
                            , showVertices: true
                        };

                        RadarChart.draw(divId, json, myOptions);

                        ////////////////////////////////////////////
                        /////////// Initiate legend ////////////////
                        ////////////////////////////////////////////

                        var svg = d3.select('#chart-radar')
                        .selectAll('svg')
                        .append('svg')
                        .attr("width", w + 300)
                        .attr("height", h)
                        .style("font-size", textSizeLegend);

                        // Initiate Legend
                        var legend = svg.append("g")
                        .attr("class", "legend")
                        .attr("height", 100)
                        .attr("width", 200)
                        .attr('transform', 'translate(90,20)');

                        // Create colour squares
                        legend.selectAll('rect')
                        .data(legendOptions)
                        .enter()
                        .append("rect")
                        .attr("x", w - 8)
                        .attr("y", function (d, i) {
                            return i * 20;
                        })
                        .attr("width", 10)
                        .attr("height", 10)
                        .style("fill", function (d, i) {
                            return colorscale(i);
                        });

                        // Create text next to squares
                        legend.selectAll('text')
                        .data(legendOptions)
                        .enter()
                        .append("text")
                        .attr("x", w + 3)
                        .attr("y", function (d, i) {
                            return i * 20 + 9;
                        })
                        .attr("font-size", textSizeLegend)
                        .attr("fill", "#737373")
                        .text(function (d) {
                            return d;
                        });
                    };
                    drawRadarCharts();
                }
                OcultarPopupposition();
            });
        });
        $('#descargarExcelParcial').on('click', function () {
            var urlAccion = '';
            var graficaSelect = $('#graficaActual option:selected').val();
            if (graficaSelect == '') {
                swal('Atención', 'Seleccione el informe que desea descargar.');
                return false;
            }
            switch (graficaSelect) {
                case '1':
                    urlAccion = '/ObtenerExcelPorcentajeDeRespuestas';
                    break;
                case '2':
                    urlAccion = '/ObtenerExcelPorcentajeObtenido';
                    break;
            }
            $.ajax({
                url: urlReportes + '/ObtenerInformeExccel',
                type: 'post'
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = urlReportes + urlAccion;
            })
        });
    });

    //DESCARGA EL EXCEL DE ESTANDARES MINIMOS
    $("#descargarEstandaresMinimosParcial").on("click", function () {
        $.ajax({
            url: '../EvaluacionEstandarMinimo/ObtenerInformeExccel',
            type: 'post',
            data: ''
        }).done(function (response) {
            if (response != null && response != undefined && response.Mensaje == 'OK')
                window.location.href = '../EvaluacionEstandarMinimo/DescargarInformeExccel';
        })
    });
</script>
