@model List<SG_SST.Models.Planificacion.CicloModel>
@{ 
    var idCiclo = "cicloActual";
    var opciones = Model.Select(c => new SelectListItem() { Value = c.IdCiclo.ToString(), Text = c.Nombre }).ToList();
    opciones.Add(new SelectListItem() { Value = "5", Text = "Calificación de los Ciclos..."});

 }
<script src="~/Scripts/EvaluacionEstandarMinimo/reportes-estandar-minimos.js"></script>
<div class="panel-heading" style="color:black">
    Gráfica de Calificación del Estándar por cada ciclo del EM-SGSST
</div>
<div class="container-graficas">
    <div class="inner-graficas">
        <div class="form-group row">
            <div class="col-xs-2">
                <h4>Ciclos:</h4>
            </div>
            <div class="col-xs-4">
                @Html.DropDownList(idCiclo, opciones, "Seleccione un ciclo...", new { @class = "form-control" })
            </div>
            <div class="col-xs-5">
                <button id="volver_calf_est" type="button" class="boton botonactive">
                    Volver a calificación
                </button>
            </div>
        </div>
        <div class="row">
            <h3 id="tit_ciclo"></h3>
        </div>
        <div id="graficarEst"></div>
        <div class="form-group row">
            <button id="descargarGraficaFinalExcel" style="margin-top: 10px" type="button" class="agr_aspec btn btn-default boton botoninfo">
                Descargar Excel
            </button>
            <button id="descargarExcelParcial" style="margin-top: 10px; display:none;" type="button" class="agr_aspec btn btn-default boton botoninfo">
                Descargar Excel
            </button>
            <button id="descargarEstandaresMinimos" style="margin-top: 10px" type="button" class="agr_aspec btn btn-default boton botoninfo">
                Descargar Estandares Minimos
            </button>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        var rangoColores = ["#A9CCE3", "#D4AC0D", "#58D68D", "#F1948A", "#73C6B6", "#B03A2E", "#A569BD", "#138D75", "#D4AC0D", "#85C1E9", "#A93226", "#616A6B", "#34495E", "#2874A6"];
        var urlBase = utils.getBaseUrl();
        var urlReportes = urlBase + '/EvaluacionEstandarMinimo';
        var anchoSVG = 960;
        var altoSVG = 500;
        $('#volver_calf_est').on('click', function () {
            window.location.href = urlReportes + '/Index';
        });
        $('#cicloActual').on('change', function () {
            var cicloSelect = $(this).val();
            var tipoGrafica = 1;
            var urlAccion = '';
            if (cicloSelect == '') {
                swal('Atención', 'Seleccione el ciclo que desea para generar la gráfica.');
                return false;
            }
            switch (cicloSelect) {
                case '1':
                    $('#tit_ciclo').text('I. PLANEAR');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    $('#descargarExcelParcial').hide();
                    $('#descargarGraficaFinalExcel').show();
                    break;
                case '2':
                    $('#tit_ciclo').text('II. HACER');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    $('#descargarExcelParcial').hide();
                    $('#descargarGraficaFinalExcel').show();
                    break;
                case '3':
                    $('#tit_ciclo').text('III. VERIFICAR');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    $('#descargarExcelParcial').hide();
                    $('#descargarGraficaFinalExcel').show();
                    break;
                case '4':
                    $('#tit_ciclo').text('IV. ACTUAR');
                    urlAccion = '/ObtenerCalificacionEstandares';
                    $('#descargarExcelParcial').hide();
                    $('#descargarGraficaFinalExcel').show();
                    break;
                case '5':
                    $('#tit_ciclo').text('Calificación Ciclos EM-SGSST');
                    urlAccion = '/ObtenerPorcentajePuntajeDePuntajeTotal';
                    tipoGrafica = 2;
                    $('#descargarGraficaFinalExcel').hide();
                    $('#descargarExcelParcial').show();
                    break;
            }
            if ($('svg').length > 0)
                $('svg').remove();
            PopupPosition();
            if (tipoGrafica == 1) {
                $.ajax({
                    url: urlReportes + urlAccion,
                    type: 'post',
                    data: { idCiclo: cicloSelect }
                }).done(function (response) {
                    if (response != null && response != undefined && response != '' && response.Mensaje == 'OK') {
                        var data = response.Datos.Estandares;
                        var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                            width = 500 - margin.left - margin.right,
                            height = 300 - margin.top - margin.bottom, padding = 100;

                        //se configuran los colores
                        var color = d3.scaleOrdinal().range(rangoColores);
                        // set the ranges
                        var x = d3.scaleBand()
                                    .rangeRound([0, width])
                                    //.range([padding, width - padding * 2])
                                  .paddingInner(0.05);//.padding(0.1);

                        var y = d3.scaleLinear()
                                  .range([height, 0])

                        var xAxis = d3.axisBottom(x)
                                        .scale(x);

                        // function for the x grid lines
                        function make_x_axis() {
                            return d3.axisBottom()
                                .scale(x)
                                .ticks(5)
                        }

                        // function for the y grid lines
                        function make_y_axis() {
                            return d3.axisLeft()
                                .scale(y)
                                .ticks(5)
                        }

                        var svg = d3.select("#graficarEst").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", altoSVG)
                          .append("g")
                            .attr("transform",
                                  "translate(" + margin.left + "," + margin.top + ")");

                        // Scale the range of the data in the domains
                        x.domain(data.map(function (d) { return d.Descripcion; }));
                        y.domain([0, d3.max(data, function (d) { return d.CalificacionFinal; })]);
                        // append the rectangles for the bar chart
                        svg.selectAll(".bar")
                            .data(data)
                          .enter().append("rect")
                            .attr("class", "bar")
                            .attr("x", function (d) { return x(d.Descripcion); })
                            .attr("width", x.bandwidth() - 10)
                            .attr("y", function (d) { return y(d.CalificacionFinal); })
                                .transition().duration(3000)
                                .delay(function (d, i) { return i * 200; })
                            .attr("height", function (d) { return height - y(d.CalificacionFinal); })
                            .style("fill", function (d) { return color(d.Descripcion) });

                        // Draw the x Grid lines
                        //svg.append("g")
                        //    .attr("class", "grid")
                        //    .attr("transform", "translate(0," + height + ")")
                        //    .call(make_x_axis()
                        //        .tickSize(-height, 0, 0)
                        //        .tickFormat("")
                        //    )
                        // Draw the y Grid lines
                        svg.append("g")
                            .attr("class", "grid")
                            .call(make_y_axis()
                                .tickSize(-width, 0, 0)
                                .tickFormat("")
                            )
                        //svg.selectAll(".bar2")
                        //  .data(data)
                        //  .enter().append("rect")
                        //  .attr("class", "bar2")
                        //  .attr("x", function (d) { return x(d.Descripcion); })
                        //  .attr("y", function (d) { return y(d.CalificacionFinal); })
                        //  .attr("width", x.bandwidth() - 10)
                        //  .attr("height", function (d) { return (height - y(d.CalificacionFinal))/2; })
                        //  .attr("transform", "translate (" + (+height / 2) + "," + (-height / 2) + ") skewX(" + -45 + ")")
                        //  .style("fill", function (d) { return color(d.Descripcion) });

                        //svg.selectAll(".bar3")
                        //  .data(data)
                        //  .enter().append("rect")
                        //  .attr("class", "bar3")
                        //  .attr("x", function (d) { return x(d.Descripcion); })
                        //  .attr("y", function (d) { return y(d.CalificacionFinal)/2; })
                        //  .attr("width", (x.bandwidth() - 10)/2)
                        //  .attr("height", function (d) { return (height - y(d.CalificacionFinal)); })
                        //  .attr("transform", "translate (" + (+height / 2) + "," + (-height / 2) + ") skewX(" + -45 + ")")
                        //  .style("fill", function (d) { return color(d.Descripcion) });

                        //grupo para manejar el eje x. Los nombres de las contingencias
                        svg.append("g")
                            .attr("transform", "translate(0," + height + ")")
                            .attr("class", "x axis")
                            .call(xAxis)
                            .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("dx", "-.82em")
                                .attr("dy", ".55em")
                                .attr("width", x.bandwidth() - 10)
                                .attr("transform", "rotate(318)")
                                .style("font-size", "10px")
                                .style("font-weight", "600")
                                .style("font-family", "Georgia")
                                .style("fill", "black");
                        //grupo para mostrar el eje y
                        svg.append("g")
                            .call(d3.axisLeft(y))
                            .selectAll("text")
                                .attr("dx", "-1.4em")
                                .attr("dy", ".55em")
                        ;
                    }
                    OcultarPopupposition();
                });
            } else {
                $.ajax({
                    url: urlReportes + urlAccion,
                    type: 'post'
                }).done(function (response) {
                    if (response != null && response != undefined && response != '' && response.Mensaje == 'OK') {
                        var data = response.Datos;
                        var margin = { top: 20, right: 20, bottom: 30, left: 40 },
                            width = 500 - margin.left - margin.right,
                            height = 300 - margin.top - margin.bottom, padding = 100;

                        var wMaior = 400;
                        var wMenor = 200;

                        var colorscale = d3.scaleOrdinal(d3.schemeCategory10);
                        var legendOptions = ['Calificación'];
                        var size = data.length;
                        var json = [
                            [
                                { "axis": "I. PLANEAR", "value": 0 },
                                { "axis": "IV. ACTUAR", "value": 0 },
                                { "axis": "III. VERIFICAR", "value": 0 },
                                { "axis": "II. HACER", "value": 0 }
                            ]
                        ];
                        if (size > 0) {
                            var json = null;
                            json = [
                                    [
                                        { "axis": "I. PLANEAR", "value": data[0].PorcenObtenido },
                                        { "axis": "IV. ACTUAR", "value": data[3].PorcenObtenido },
                                        { "axis": "III. VERIFICAR", "value": data[2].PorcenObtenido },
                                        { "axis": "II. HACER", "value": data[1].PorcenObtenido }
                                    ]
                            ];
                        }

                        function drawRadarCharts() {
                            drawRadarChart('#graficarEst', wMaior, wMaior);
                        };

                        function drawRadarChart(divId, w, h) {
                            var textSizeLevels = "10px !important";
                            var textSizeTooltip = "13px !important";
                            var textSizeLegend = "11px !important";
                            var circleSize = 5;
                            var strokeWidthPolygon = "2px";

                            var RadarChart = {
                                draw: function (id, data, options) {
                                    var cfg = {
                                        radius: circleSize,
                                        w: w,
                                        h: h,
                                        factor: 1,
                                        factorLegend: .85,
                                        levels: 5,
                                        maxValue: 0,
                                        radians: 2 * Math.PI,
                                        opacityArea: 0.001,
                                        ToRight: 5,
                                        TranslateX: 80,
                                        TranslateY: 30,
                                        ExtraWidthX: 10,
                                        ExtraWidthY: 100,
                                        color: d3.scaleOrdinal(d3.schemeCategory10)
                                    };

                                    if ('undefined' !== typeof options) {
                                        for (var i in options) {
                                            if ('undefined' !== typeof options[i]) {
                                                cfg[i] = options[i];
                                            }
                                        }
                                    }
                                    //cfg.maxValue = Math.max(cfg.maxValue, d3.max(data, function (i) { return d3.max(i.map(function (o) { return o.value; })); }));
                                    cfg.maxValue = 100;
                                    var allAxis = (data[0].map(function (i, j) { return i.axis; }));
                                    var total = allAxis.length;
                                    var radius = cfg.factor * Math.min(cfg.w / 2, cfg.h / 2);
                                    d3.select(id)
                                        .select("svg").remove();

                                    var g = d3.select(id)
                                        .append("svg")
                                        .attr("width", cfg.w + cfg.ExtraWidthX)
                                        .attr("height", cfg.h + cfg.ExtraWidthY)
                                        .attr("class", "graph-svg-component")
                                        .append("g")
                                        .attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");

                                    var tooltip;

                                    //Segmentos circulares por nivel (6 niveles)
                                    for (var j = 0; j < cfg.levels; j++) {
                                        var levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
                                        g.selectAll(".levels")
                                        .data(allAxis)
                                        .enter()
                                        .append("svg:line")
                                        .attr("x1", function (d, i) { return levelFactor * (1 - cfg.factor * Math.sin(i * cfg.radians / total)); })
                                        .attr("y1", function (d, i) { return levelFactor * (1 - cfg.factor * Math.cos(i * cfg.radians / total)); })
                                        .attr("x2", function (d, i) { return levelFactor * (1 - cfg.factor * Math.sin((i + 1) * cfg.radians / total)); })
                                        .attr("y2", function (d, i) { return levelFactor * (1 - cfg.factor * Math.cos((i + 1) * cfg.radians / total)); })
                                        .attr("class", "line")
                                        .style("stroke", "grey")
                                        .style("stroke-opacity", "0.75")
                                        //.style("stroke-width", "0.3px")
                                        .attr("transform", "translate(" + (cfg.w / 2 - levelFactor) + ", " + (cfg.h / 2 - levelFactor) + ")");
                                    }

                                    //Texto indicando el porcentaje (%) de cada nivel
                                    for (var j = 0; j < cfg.levels; j++) {
                                        var levelFactor = cfg.factor * radius * ((j + 1) / cfg.levels);
                                        g.selectAll(".levels")
                                        .data([1]) //dummy data
                                        .enter()
                                        .append("svg:text")
                                        .attr("x", function (d) { return levelFactor * (1 - cfg.factor * Math.sin(0)); })
                                        .attr("y", function (d) { return levelFactor * (1 - cfg.factor * Math.cos(0)); })
                                        .attr("class", "legend")
                                        .style("font-family", "sans-serif")
                                        .style("font-size", textSizeLevels)
                                        .attr("transform", "translate(" + (cfg.w / 2 - levelFactor + cfg.ToRight) + ", " + (cfg.h / 2 - levelFactor) + ")")
                                        .attr("fill", "#737373")
                                        .text(((j + 1) * cfg.maxValue / cfg.levels) + ' %');
                                    }

                                    series = 0;
                                    var axis = g.selectAll(".axis")
                                    .data(allAxis)
                                    .enter()
                                    .append("g")
                                    .attr("class", axis);

                                    axis.append("line")
                                    .attr("x1", cfg.w / 2)
                                    .attr("y1", cfg.h / 2)
                                    .attr("x2", function (d, i) { return cfg.w / 2 * (1 - cfg.factor * Math.sin(i * cfg.radians / total)); })
                                    .attr("y2", function (d, i) { return cfg.h / 2 * (1 - cfg.factor * Math.cos(i * cfg.radians / total)); })
                                    .attr("class", "line")
                                    .style("stroke", "grey")
                                    .style("stroke-width", "1px");

                                    //Texto en cada vertice (ciclos)
                                    axis.append("text")
                                    .attr("class", "legend")
                                    .text(function (d) { return d; })
                                    .style("font-family", "sans-serif")
                                    .style("font-size", textSizeLegend)
                                    .attr("text-anchor", "middle")
                                    .attr("dy", "1.5em")
                                    .attr("transform", function (d, i) { return "translate(0, -20)"; })
                                    .attr("x", function (d, i) { return cfg.w / 2 * (1 - cfg.factorLegend * Math.sin(i * cfg.radians / total)) - 60 * Math.sin(i * cfg.radians / total); })
                                    .attr("y", function (d, i) { return cfg.h / 2 * (1 - Math.cos(i * cfg.radians / total)) - 20 * Math.cos(i * cfg.radians / total); });

                                    data.forEach(function (y, x) {
                                        dataValues = [];
                                        g.selectAll(".nodes")
                                        .data(y, function (j, i) {
                                            dataValues.push([
                                                cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                                                cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
                                            ]);
                                        });
                                        dataValues.push(dataValues[0]);
                                        g.selectAll(".area")
                                        .data([dataValues])
                                        .enter()
                                        .append("polygon")
                                        .attr("class", "radar-chart-series_" + series)
                                        .style("stroke-width", strokeWidthPolygon)
                                        .style("stroke", cfg.color(series))
                                        .attr("points", function (d) {
                                            var str = "";
                                            for (var pti = 0; pti < d.length; pti++) {
                                                str = str + d[pti][0] + "," + d[pti][1] + " ";
                                            }
                                            return str;
                                        })
                                        .style("fill", function (j, i) {
                                            return cfg.color(series);
                                        })
                                        .style("fill-opacity", cfg.opacityArea)
                                        .on('mouseover', function (d) {
                                            z = "polygon." + d3.select(this).attr("class");
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", 0.1);
                                            g.selectAll(z)
                                            .transition(200)
                                            .style("fill-opacity", 0.7);
                                        })
                                        .on('mouseout', function () {
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", cfg.opacityArea);
                                        });

                                        series++;
                                    });

                                    series = 0;

                                    data.forEach(function (y, x) {
                                        g.selectAll(".nodes")
                                        .data(y).enter()
                                        .append("svg:circle")
                                        .attr("class", "radar-chart-series_" + series)
                                        .attr('r', cfg.radius)
                                        .attr("alt", function (j) { return Math.max(j.value, 0); })
                                        .attr("cx", function (j, i) {
                                            dataValues.push([
                                                cfg.w / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total)),
                                                cfg.h / 2 * (1 - (parseFloat(Math.max(j.value, 0)) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total))
                                            ]);
                                            return cfg.w / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.sin(i * cfg.radians / total));
                                        })
                                        .attr("cy", function (j, i) {
                                            return cfg.h / 2 * (1 - (Math.max(j.value, 0) / cfg.maxValue) * cfg.factor * Math.cos(i * cfg.radians / total));
                                        })
                                        .attr("data-id", function (j) {
                                            return j.axis;
                                        })
                                        .style("fill", cfg.color(series)).style("fill-opacity", .9)
                                        .on('mouseover', function (d) {
                                            newX = parseFloat(d3.select(this).attr('cx')) - 10;
                                            newY = parseFloat(d3.select(this).attr('cy')) - 5;

                                            tooltip.attr('x', newX)
                                            .attr('y', newY)
                                            .text(d.value)
                                            .transition(200)
                                            .style('opacity', 1);

                                            z = "polygon." + d3.select(this).attr("class");
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", 0.1);
                                            g.selectAll(z)
                                            .transition(200)
                                            .style("fill-opacity", 0.7);
                                        })
                                        .on('mouseout', function () {
                                            tooltip.transition(200)
                                            .style('opacity', 0);
                                            g.selectAll("polygon")
                                            .transition(200)
                                            .style("fill-opacity", cfg.opacityArea);
                                        })
                                        .append("svg:title")
                                        .text(function (j) {
                                            return Math.max(j.value, 0);
                                        });

                                        series++;
                                    });

                                    //Tooltip
                                    tooltip = g.append('text')
                                    .style('opacity', 0)
                                    .style('font-family', 'sans-serif')
                                    .style('font-size', textSizeTooltip);
                                }
                            };

                            // Options for the Radar chart, other than default
                            var myOptions = {
                                w: w
                                , h: h
                                , ExtraWidthX: 180
                                , labelScale: 0.7
                                , levels: 5
                                , levelScale: 0.85
                                , facetPaddingScale: 1.9
                                , maxValue: 0.6
                                , showAxes: true
                                , showAxesLabels: true
                                , showLegend: true
                                , showLevels: true
                                , showLevelsLabels: false
                                , showPolygons: true
                                , showVertices: true
                            };

                            RadarChart.draw(divId, json, myOptions);

                            ////////////////////////////////////////////
                            /////////// Initiate legend ////////////////
                            ////////////////////////////////////////////

                            var svg = d3.select('#chart-radar')
                            .selectAll('svg')
                            .append('svg')
                            .attr("width", w + 300)
                            .attr("height", h)
                            .style("font-size", textSizeLegend);

                            // Initiate Legend
                            var legend = svg.append("g")
                            .attr("class", "legend")
                            .attr("height", 100)
                            .attr("width", 200)
                            .attr('transform', 'translate(90,20)');

                            // Create colour squares
                            legend.selectAll('rect')
                            .data(legendOptions)
                            .enter()
                            .append("rect")
                            .attr("x", w - 8)
                            .attr("y", function (d, i) {
                                return i * 20;
                            })
                            .attr("width", 10)
                            .attr("height", 10)
                            .style("fill", function (d, i) {
                                return colorscale(i);
                            });

                            // Create text next to squares
                            legend.selectAll('text')
                            .data(legendOptions)
                            .enter()
                            .append("text")
                            .attr("x", w + 3)
                            .attr("y", function (d, i) {
                                return i * 20 + 9;
                            })
                            .attr("font-size", textSizeLegend)
                            .attr("fill", "#737373")
                            .text(function (d) {
                                return d;
                            });
                        };
                        drawRadarCharts();
                    }
                    OcultarPopupposition();
                });
            }
        });

        //DESCARGA A EXCEL LA GRAFICA PARCIAL
        $('#descargarExcelParcial').on('click', function () {
            var urlAccion = '/ObtenerExcelPorcentajeObtenido';
            var cicloSelect = $('#cicloActual').val();
            if (cicloSelect == '') {
                swal('Atención', 'Seleccione el informe que desea descargar.');
                return false;
            }
            $.ajax({
                url: urlReportes + '/ObtenerInformeExccel',
                type: 'post'
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = urlReportes + urlAccion;
            })
        });
        //DESCARGA A EXCEL LA GRAFICA ACTUAL
        $("#descargarGraficaFinalExcel").on("click", function () {
            var cicloSelect = $('#cicloActual').val();
            if (cicloSelect == '') {
                swal('Atención', 'Seleccione el informe que desea descargar.');
                return false;
            }
            $.ajax({
                url: '../EvaluacionEstandarMinimo/CalificacionFinal',
                type: 'post',
                data: { idCiclo: cicloSelect }
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = '../EvaluacionEstandarMinimo/ObtenerCalificacionFinalExcel';
            })
        });

        //DESCARGA A PDF LA GRAFICA ACTUAL
        $("#descargarGraficaFinalpdf").on("click", function () {
            var cicloSelect = $('#cicloActual').val();
            $.ajax({
                url: '../EvaluacionEstandarMinimo/CalificacionFinal',
                type: 'post',
                data: { idCiclo: cicloSelect }
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = '../EvaluacionEstandarMinimo/ObtenerCalificacionFinalPdf';
            })
        });

        //DESCARGA EL EXCEL DE ESTANDARES MINIMOS
        $("#descargarEstandaresMinimos").on("click", function () {
            $.ajax({
                url: '../EvaluacionEstandarMinimo/ObtenerInformeExccel',
                type: 'post',
                data: ''
            }).done(function (response) {
                if (response != null && response != undefined && response.Mensaje == 'OK')
                    window.location.href = '../EvaluacionEstandarMinimo/DescargarInformeExccel';
            })
        });
    });
    
</script>
